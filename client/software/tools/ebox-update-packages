#!/usr/bin/perl

# Copyright (C) 2007 Warp Networks S.L.
# Copyright (C) 2008-2010 eBox Technologies S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use warnings;

use EBox;
use EBox::Exceptions::Sudo::Command;
use EBox::Exceptions::External;
use EBox::Global;
use EBox::ProgressIndicator;
use EBox::Sudo;

use Error qw(:try);

EBox::init();

my $progressId          = pop @ARGV;
my $progressIdParamName = pop @ARGV; # unused
my @packages            = @ARGV;
my $insPkgs = "";

my $progress = EBox::ProgressIndicator->retrieve($progressId);
$progress->started() or die('progress executable not run');

my $pkg;
foreach $pkg (@packages) {
    $insPkgs .= " $pkg";
}

my ($retValue, $errorMsg) = (0, '');


try {
	my $fifo = '/var/lib/ebox/ebox-apt-update.pipe';

	#Clean fifo
	EBox::Sudo::silentRoot ("rm $fifo");
	EBox::Sudo::silentRoot ("mkfifo $fifo");

	EBox::info("Begin packages intallation");

	my $pid = fork();
	if ($pid == 0) {
		EBox::Sudo::root ("/usr/share/ebox-software/ebox-apt-update $insPkgs ");
		exit 0;
	}

	my $break = 0;
	my ($read, $text, $oldText);
	do {
		unless (open ($read, '<',  $fifo)){
			EBox::error("Error opening fifo <$fifo> - $!");
			throw IOException("Error opening fifo <$fifo> - $!");
		}
		my $firstLine = '';
        my $lastLine = '';
		while ($text = <$read>) {
			if ($text eq $oldText) {
				last;
			}
			unless ($firstLine) {
				$firstLine = $text;
			}

			if ($text eq "end") {
				$break = 1;
			}
			unless (($text eq $oldText) or ($text eq $lastLine)) {
				EBox::info("Read: $text");
				EBox::info("R OT: $oldText");
                #if ($text =~ /down([0-9]*)/) {
                #    $progress->setTotalTicks($1);
                #}
				if ($text =~ /ins([0-9]*)/) {
					$progress->setTotalTicks($1*2);
				}
				if ($text =~ /Get:[0-9]*\s(.*)/){
					$progress->setMessage("Downloading $1");
				}
				if ($text =~ /(Unpacking\s.*)/){
					$progress->notifyTick();
					$progress->setMessage($text);
				}
				if ($text =~ /(Setting up\s.*)/){
					$progress->notifyTick();
					$progress->setMessage($text);
				}
			}
			$oldText = $firstLine;
            $lastLine = $text;
		}
		close $read;
	} until($break);

	EBox::info("End packages installation");
	my $global = EBox::Global->getInstance(1);
	my $software = $global->modInstance('software');
	#causes the cache to be generated
	$software->listUpgradablePkgs(1);
	#call also listEBoxPkgs to regen the cache
	$software->listEBoxPkgs(1);
} catch Error with {
   my ($exc) = @_;
    $retValue = $exc->exitValue();
    $errorMsg = $exc->stringify();
    EBox::error($errorMsg);
} finally {

	try {
		$progress->setAsFinished($retValue, $errorMsg);
	} catch EBox::Exceptions::External with {
	       # Ignore if it cannot put as finished since it's possible it
	       # is already destroyed. Why?
	       EBox::warn("$progressId does not exist");
	};

	exit $retValue;
};

1;
